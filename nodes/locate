#!/usr/bin/env python3

# CSCI 5551 final project
# Spring 2022

# Used as ref: 
# https://github.com/arjunskumar/Line-Follower--ROS/blob/master/follower_ros.py
# https://learnopencv.com/find-center-of-blob-centroid-using-opencv-cpp-python/

import rospy
from grid_nav.msg import GridErr
from sensor_msgs.msg import Image
import cv2
import cv_bridge
import numpy as np


SHOW_CV_IMAGE = False
SHOW_MASKS = False
PUB_IMAGES = True

GRID_SIZE = 0.5
IMAGE_RATE = 10
SCALE = 1/475
BOT_VERT_CENTER_MULT = 0.42

MIN_NONMASK = 50

# map from gimp to opencv
def hsv_map(hsv):
    return np.array([hsv[0] * 180/256, hsv[1] * 256/256, hsv[2] * 256/256])

# input gimp values
YELLOW_LOW = hsv_map([140, 64, 68])
YELLOW_HI = hsv_map([169, 231, 176])

LOST_LINE_CORRECTION = 0.2

STRAIGHT_TOP = 0
STRAIGHT_BOT = 0.5
STRAIGHT_LEFT = 1/3
STRAIGHT_RIGHT = 2/3

LEFT_TOP = 0
LEFT_BOT = 1
LEFT_LEFT = 0
LEFT_RIGHT = 0.33

RIGHT_TOP = 0
RIGHT_BOT = 1
RIGHT_LEFT = 0.66
RIGHT_RIGHT = 1

bridge = cv_bridge.CvBridge()

class NoLineError(RuntimeError):
    pass

class GridLocate:

    def __init__(self):

        rospy.init_node('locate')
        self._img_sub = rospy.Subscriber('/camera/image', Image, self.image_callback)
        self._err_pub = rospy.Publisher('grid_err', GridErr, queue_size=10)
        if PUB_IMAGES:
            self._lmsk_pub = rospy.Publisher('left_mask', Image, queue_size=10)
            self._rmsk_pub = rospy.Publisher('right_mask', Image, queue_size=10)
            self._fmsk_pub = rospy.Publisher('front_mask', Image, queue_size=10)
            self._image_pub = rospy.Publisher('cv_image', Image, queue_size=10)
        else:
            self._lmsk_pub = None
            self._rmsk_pub = None
            self._fmsk_pub = None
            self._image_pub = None

        self.new_img = False
        rate = rospy.Rate(IMAGE_RATE)
        rospy.loginfo('Locate starting...')
        while not rospy.is_shutdown():
            self.process_image()
            rate.sleep()


    def process_image(self):

        # wait for new image
        while not self.new_img and not rospy.is_shutdown(): rospy.sleep(0.1)

        # mask image
        image = bridge.imgmsg_to_cv2(self.image_msg, desired_encoding='bgr8')
        self.new_img = False
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        # lower_yellow = np.array(YELLOW_LOW)
        # upper_yellow = np.array(YELLOW_HI)
        mask = cv2.inRange(hsv, YELLOW_LOW, YELLOW_HI)
        h,w = mask.shape

        # Get centers
        try:
            f_cx, f_cy = calc_center(mask, STRAIGHT_LEFT, STRAIGHT_RIGHT, STRAIGHT_TOP, STRAIGHT_BOT, show=SHOW_MASKS, pub=self._fmsk_pub)
            add_circle(image, f_cx, f_cy)
        except NoLineError:
            f_cx = f_cy = float('inf')

        try:
            l_cx, l_cy = calc_center(mask, LEFT_LEFT, LEFT_RIGHT, LEFT_TOP, LEFT_BOT, show=SHOW_MASKS, pub=self._lmsk_pub)
            add_circle(image, l_cx, l_cy)
        except NoLineError:
            l_cx = w * -LOST_LINE_CORRECTION
            l_cy = h/2

        try:
            r_cx, r_cy = calc_center(mask, RIGHT_LEFT, RIGHT_RIGHT, RIGHT_TOP, RIGHT_BOT, show=SHOW_MASKS, pub=self._rmsk_pub)
            add_circle(image, r_cx, r_cy)
        except NoLineError:
            r_cx = w * LOST_LINE_CORRECTION
            r_cy = h/2

        # Side error is distance from average of l_cx and r_cx
        # right is positive
        lr_mid = (l_cx + r_cx) / 2
        # lr_dif = r_cx - l_cx
        lr_frame_mid = w/2
        lr_frame_err = lr_frame_mid - lr_mid
        # scale to grid
        # scale = GRID_SIZE/lr_dif
        lr_grid_err = lr_frame_err * SCALE

        # front error is difference between f_cy and center
        # forward is positive
        f_frame_err = f_cy - BOT_VERT_CENTER_MULT*h
        f_grid_err = (f_frame_err * SCALE) + GRID_SIZE/2

        err = GridErr()
        err.side_err = lr_grid_err
        err.front_err = f_grid_err
        self._err_pub.publish(err)

        cv2.putText(image, f'x_err: {lr_grid_err:.3} y_err: {f_grid_err:.3}', (5,h-25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255),2)

        if PUB_IMAGES:
            img_msg = bridge.cv2_to_imgmsg(image, encoding='bgr8')
            self._image_pub.publish(img_msg)

        if SHOW_CV_IMAGE:
            cv2.imshow('image', image)
            cv2.waitKey(1)



    def image_callback(self, msg):

        self.image_msg = msg
        self.new_img = True


def calc_center(mask: np.ndarray, l: float, r: float, t: float, b:float, show:bool = False, pub:rospy.Publisher = None) -> "tuple[float]":
    '''
    Find the center of the mask white space insided the left, right, top, bottom bounds
    '''

    # Make copy so we don't change it
    mask = mask.copy()
    h,w = mask.shape
    top = int(h * t)
    bot = int(h * b)
    left = int(w * l)
    right = int(w * r)
    mask[:top, :] = 0
    mask[bot:, :] = 0
    mask[:, :left] = 0
    mask[:, right:] = 0
    total_nonmask = np.sum(mask > 0)
    if total_nonmask < MIN_NONMASK:
        mask[mask > 0] = 0

    if show:
        cv2.imshow(f'mask_{l}_{r}_{t}_{b}', mask)

    if pub != None:
        msg = bridge.cv2_to_imgmsg(mask, encoding='mono8')
        pub.publish(msg)

    m = cv2.moments(mask)
    if not m['m00'] > 0:
        raise NoLineError('No line found!')
        # return 0,0
    cx = int(m['m10']/m['m00'])
    cy = int(m['m01']/m['m00'])

    return cx,cy

def add_circle(image, cx: float, cy: float) -> None:
    '''
    Add a circle with center (cx,cy) to image
    '''

    cv2.circle(image, (cx, cy), 5, (255,255,255), -1)


if __name__ == '__main__':
    try:
        GridLocate()
    except rospy.ROSInterruptException:
        exit()